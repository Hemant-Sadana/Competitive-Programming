bool valid(string temp)
{
    stack<int> st;
    int n = temp.size();
    for(int i=0;i<n;i++)
    {
        if(temp[i]=='(')
        st.push(1);
        else
        {
            if(st.empty())
            return false;
            st.pop();
        }
    }
    return st.empty();
}
void generate(int n,int index,string temp,vector<string> &ans)
{
    if(index==n)
    {
        if(valid(temp))
        ans.push_back(temp);
        return;
    }
        temp.push_back('(');
        generate(n,index+1,temp,ans);
        temp.pop_back();
        temp.push_back(')');
        generate(n,index+1,temp,ans);
}
vector<string> Solution::generateParenthesis(int A) {
    vector<string> ans;
    generate(2*A,0,"",ans);
    return ans;
}
